@page "/admin"
@using AianBlazorPortfolio.Client.Shared.Models
@inject HttpClient Http

<h1>Admin Page</h1>

<!-- Testimonial Management Section -->
<h2>Manage Testimonials</h2>
@if (testimonials == null)
{
    <p>Loading testimonials...</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Rating</th>
                <th>Comment</th>
                <th>Submitted On</th>
                <th>Approved</th>
                <th>Featured</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var t in testimonials)
            {
                <tr>
                    <td>@t.Id</td>
                    <td>@t.Name</td>
                    <td>@t.Rating</td>
                    <td>@t.Comment</td>
                    <td>@t.SubmittedOn.ToString("g")</td>
                    <td>@(t.Approved ? "Yes" : "No")</td>
                    <td>
                        <input type="checkbox" checked="@t.Featured" @onchange="(e) => UpdateFeatured(t, e.Value)" />
                    </td>
                    <td>
                        @if (!t.Approved)
                        {
                            <button class="btn btn-success btn-sm" @onclick="() => ApproveTestimonial(t.Id)">Approve</button>
                        }
                        <button class="btn btn-danger btn-sm" @onclick="() => RejectTestimonial(t.Id)">Reject</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<!-- Site Content Management Section -->
<h2>Manage Site Content</h2>
@if (siteContent == null)
{
    <p>Loading site content...</p>
}
else
{
    <EditForm Model="siteContent" OnValidSubmit="UpdateSiteContent">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label>About Text</label>
            <InputTextArea @bind-Value="siteContent.AboutText" class="form-control" />
        </div>
        <div class="mb-3">
            <label>About Image URL</label>
            <InputText @bind-Value="siteContent.AboutImageUrl" class="form-control" />
        </div>
        <div class="mb-3">
            <label>Works Content</label>
            <InputTextArea @bind-Value="siteContent.WorksContent" class="form-control" />
        </div>
        <div class="mb-3">
            <label>Skills Content</label>
            <InputTextArea @bind-Value="siteContent.SkillsContent" class="form-control" />
        </div>
        <div class="mb-3">
            <label>Contact Email</label>
            <InputText @bind-Value="siteContent.ContactEmail" class="form-control" />
        </div>
        <div class="mb-3">
            <label>Contact Phone</label>
            <InputText @bind-Value="siteContent.ContactPhone" class="form-control" />
        </div>
        <div class="mb-3">
            <label>CV File French URL</label>
            <InputText @bind-Value="siteContent.CVFileFrenchUrl" class="form-control" />
        </div>
        <div class="mb-3">
            <label>CV File English URL</label>
            <InputText @bind-Value="siteContent.CVFileEnglishUrl" class="form-control" />
        </div>

        <button type="submit" class="btn btn-primary">Update Site Content</button>
    </EditForm>
}

@code {
    // Testimonials
    private List<Testimonial> testimonials;
    // Site content (for the Home page)
    private SiteContent siteContent;

    protected override async Task OnInitializedAsync()
    {
        await LoadTestimonials();
        await LoadSiteContent();
    }

    private async Task LoadTestimonials()
    {
        testimonials = await Http.GetFromJsonAsync<List<Testimonial>>("api/testimonial/all");
    }

    private async Task LoadSiteContent()
    {
        siteContent = await Http.GetFromJsonAsync<SiteContent>("api/content");
    }

    private async Task ApproveTestimonial(int id)
    {
        var response = await Http.PostAsync($"api/testimonial/approve/{id}", null);
        if (response.IsSuccessStatusCode)
        {
            await LoadTestimonials();
        }
    }

    private async Task RejectTestimonial(int id)
    {
        var response = await Http.PostAsync($"api/testimonial/reject/{id}", null);
        if (response.IsSuccessStatusCode)
        {
            await LoadTestimonials();
        }
    }

    private async Task UpdateFeatured(Testimonial t, object value)
    {
        bool isChecked = false;
        if (value is bool b)
        {
            isChecked = b;
        }
        else if (value is string s && bool.TryParse(s, out var parsed))
        {
            isChecked = parsed;
        }
        t.Featured = isChecked;
        var response = await Http.PostAsJsonAsync("api/testimonial/update", t);
        if (response.IsSuccessStatusCode)
        {
            await LoadTestimonials();
        }
    }

    private async Task UpdateSiteContent()
    {
        var response = await Http.PostAsJsonAsync("api/content/update", siteContent);
        if (response.IsSuccessStatusCode)
        {
            // Optionally notify the admin that the update was successful.
            await LoadSiteContent();
        }
    }

    // Models for this page (could also be in a shared project)
    public class Testimonial
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Comment { get; set; }
        public DateTime SubmittedOn { get; set; }
        public bool Approved { get; set; }
        public bool Featured { get; set; }
        public double Rating { get; set; }
    }
}
