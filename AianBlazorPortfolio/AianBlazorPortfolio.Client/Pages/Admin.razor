@page "/admin"
@using AianBlazorPortfolio.Client.Shared.Models
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager Navigation

<main class="admin-portfolio">
    <!-- Admin Header Section -->
    <section class="admin-header">
        <h1>Admin Dashboard</h1>
    </section>

    <!-- Admin Navigation -->
    <nav class="admin-nav">
        <ul>
            <li><a href="#testimonials-section">Testimonials</a></li>
            <li><a href="#site-content-section">Site Content</a></li>
            <li><a class="logout-btn" @onclick="HandleLogout">Logout</a></li>
        </ul>
    </nav>

    <!-- Testimonials Management Section -->
    <section id="testimonials-section" class="admin-section">
        <header class="section-header">
            <h2>Manage Testimonials</h2>
        </header>
        <div class="section-content">
            @if (testimonials == null)
            {
                <p>Loading testimonials...</p>
            }
            else
            {
                <table class="admin-table">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Name</th>
                            <th>Rating</th>
                            <th>Comment</th>
                            <th>Submitted On</th>
                            <th>Approved</th>
                            <th>Featured</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var t in testimonials)
                        {
                            <tr>
                                <td>@t.Id</td>
                                <td>@t.Name</td>
                                <td>@t.Rating</td>
                                <td>@t.Comment</td>
                                <td>@t.SubmittedOn.ToString("g")</td>
                                <td>@(t.Approved ? "Yes" : "No")</td>
                                <td>
                                    @if (t.Approved)
                                    {
                                        <input type="checkbox" checked="@t.Featured" @onchange="(e) => UpdateFeatured(t, e.Value)" />
                                    }
                                </td>
                                <td>
                                    @if (!t.Approved)
                                    {
                                        <button class="btn btn-success btn-sm" @onclick="() => ApproveTestimonial(t.Id)">Approve</button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-warning btn-sm" @onclick="() => DisapproveTestimonial(t.Id)">Disapprove</button>
                                    }
                                    <button class="btn btn-danger btn-sm" @onclick="() => RejectTestimonial(t.Id)">Reject</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </section>

    <!-- Site Content Management Section -->
    <section id="site-content-section" class="admin-section">
        <header class="section-header">
            <h2>Manage Site Content</h2>
        </header>
        <div class="section-content">
            @if (siteContent == null)
            {
                <p>Loading site content...</p>
            }
            else
            {
                <EditForm Model="siteContent" OnValidSubmit="UpdateSiteContent">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <!-- About Section -->
                    <div class="content-group">
                        <h3>About Section</h3>
                        <div class="form-group">
                            <label>About Text (English)</label>
                            <InputTextArea @bind-Value="siteContent.AboutTextEnglish" class="admin-input" />
                        </div>
                        <div class="form-group">
                            <label>About Text (French)</label>
                            <InputTextArea @bind-Value="siteContent.AboutTextFrench" class="admin-input" />
                        </div>
                        <div class="form-group">
                            <label>About Image URL or Upload</label>
                            <InputText @bind-Value="siteContent.AboutImageUrl" class="admin-input" />
                            <div class="inputfile-container">
                                <label for="aboutImageInput" class="browse-btn">
                                    Browse
                                    <InputFile OnChange="UploadAboutImage" MaxAllowedSize="10485760" id="aboutImageInput" style="display:none;" />
                                </label>
                            </div>
                        </div>
                    </div>

                    <!-- Projects Management Section -->
                    <div class="content-group">
                        <h3>Projects Management</h3>
                        @if (siteContent.Projects == null || !siteContent.Projects.Any())
                        {
                            <p>No projects added yet.</p>
                        }
                        else
                        {
                            <div class="projects-list">
                                @foreach (var project in siteContent.Projects)
                                {
                                    <div class="project-entry">
                                        <strong>@project.Name</strong>
                                        <p>Repo: <a href="@project.RepoUrl" target="_blank">@project.RepoUrl</a></p>
                                        <img src="@project.ImageUrl" alt="@project.Name" style="max-width:100px;" />
                                        <button type="button" class="btn btn-danger btn-sm" @onclick="() => RemoveProject(project)">Remove</button>
                                    </div>
                                }
                            </div>
                        }
                        <button type="button" class="btn btn-secondary" @onclick="ShowAddProjectForm">Add Project</button>
                    </div>

                    <!-- Skills Section -->
                    <div class="content-group">
                        <h3>Skills Section</h3>
                        <div class="form-group">
                            <label>Skills Content (English)</label>
                            <InputTextArea @bind-Value="siteContent.SkillsContentEnglish" class="admin-input" />
                        </div>
                        <div class="form-group">
                            <label>Skills Content (French)</label>
                            <InputTextArea @bind-Value="siteContent.SkillsContentFrench" class="admin-input" />
                        </div>
                    </div>

                    <!-- Contact Section -->
                    <div class="content-group">
                        <h3>Contact Section</h3>
                        <div class="form-group">
                            <label>Contact Email</label>
                            <InputText @bind-Value="siteContent.ContactEmail" class="admin-input" />
                        </div>
                        <div class="form-group">
                            <label>Contact Phone</label>
                            <InputText @bind-Value="siteContent.ContactPhone" class="admin-input" />
                        </div>
                        <div class="form-group">
                            <label>GitHub URL</label>
                            <InputText @bind-Value="siteContent.GithubUrl" class="admin-input" />
                        </div>
                        <div class="form-group">
                            <label>LinkedIn URL</label>
                            <InputText @bind-Value="siteContent.LinkedInUrl" class="admin-input" />
                        </div>
                    </div>

                    <!-- CV Files Section -->
                    <div class="content-group">
                        <h3>CV Files</h3>
                        <div class="form-group">
                            <label>CV File (English) URL or Upload</label>
                            <InputText @bind-Value="siteContent.CVFileEnglishUrl" class="admin-input" />
                            <div class="inputfile-container">
                                <label for="cvEnglishInput" class="browse-btn">
                                    Browse
                                    <InputFile OnChange="UploadCVEnglish" id="cvEnglishInput" style="display:none;" />
                                </label>
                            </div>
                        </div>
                        <div class="form-group">
                            <label>CV File (French) URL or Upload</label>
                            <InputText @bind-Value="siteContent.CVFileFrenchUrl" class="admin-input" />
                            <div class="inputfile-container">
                                <label for="cvFrenchInput" class="browse-btn">
                                    Browse
                                    <InputFile OnChange="UploadCVFrench" id="cvFrenchInput" style="display:none;" />
                                </label>
                            </div>
                        </div>
                    </div>

                    <button type="submit" class="btn btn-primary admin-submit">Update Site Content</button>
                </EditForm>
            }
        </div>
    </section>
</main>

@if (isAddProjectVisible)
{
    <!-- Centered Modal Overlay for "Add Project" -->
    <div class="modal-overlay" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); display: flex; align-items: center; justify-content: center; z-index: 1000;">
        <div class="modal-dialog" style="background: #fff; padding: 20px; border-radius: 8px; max-width: 500px; width: 90%;">
            <EditForm Model="newProject" OnValidSubmit="AddProject">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label>Project Name:</label>
                    <InputText @bind-Value="newProject.Name" class="admin-input" />
                </div>
                <div class="form-group">
                    <label>GitHub Repo Link:</label>
                    <InputText @bind-Value="newProject.RepoUrl" class="admin-input" />
                </div>
                <div class="form-group">
                    <label>Project Image URL:</label>
                    <InputText @bind-Value="newProject.ImageUrl" class="admin-input" />
                    <div class="inputfile-container">
                        <label for="projectImageInput" class="browse-btn">
                            Browse
                            <InputFile OnChange="UploadProjectImage" MaxAllowedSize="10485760" id="projectImageInput" style="display:none;" />
                        </label>
                    </div>
                </div>
                <button type="submit" class="btn btn-primary">Save Project</button>
                <button type="button" class="btn btn-secondary" @onclick="HideAddProjectForm">Cancel</button>
            </EditForm>
        </div>
    </div>
}

@code {
    // Project management
    private bool isAddProjectVisible = false;
    private Project newProject = new Project();

    private void ShowAddProjectForm()
    {
        newProject = new Project();
        isAddProjectVisible = true;
    }

    private void HideAddProjectForm() => isAddProjectVisible = false;

    private async Task AddProject()
    {
        if (siteContent.Projects == null)
            siteContent.Projects = new List<Project>();

        siteContent.Projects.Add(newProject);
        isAddProjectVisible = false;
        var response = await Http.PostAsJsonAsync("api/content/update", siteContent);
        if (response.IsSuccessStatusCode)
            await LoadSiteContent();
    }

    private async Task UploadProjectImage(InputFileChangeEventArgs e)
    {
        var file = e.File;
        using var content = new MultipartFormDataContent();
        using var streamContent = new StreamContent(file.OpenReadStream(10 * 1024 * 1024)); // 10 MB limit
        streamContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);
        content.Add(streamContent, "file", file.Name);
        var response = await Http.PostAsync("api/content/upload", content);
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<UploadResult>();
            newProject.ImageUrl = result.fileUrl;
            StateHasChanged();
        }
    }

    private void RemoveProject(Project project)
    {
        siteContent.Projects.Remove(project);
        _ = Http.PostAsJsonAsync("api/content/update", siteContent);
    }

    // Initialization and utility methods
    private List<Testimonial> testimonials;
    private SiteContent siteContent = new SiteContent();
    private Testimonial newTestimonial = new Testimonial { Rating = 0.0 };

    protected override async Task OnInitializedAsync()
    {
        if (!MyAuth.IsLoggedIn)
        {
            Navigation.NavigateTo("/login");
            return;
        }
        await LoadTestimonials();
        await LoadSiteContent();
    }

    private async Task LoadTestimonials()
    {
        testimonials = await Http.GetFromJsonAsync<List<Testimonial>>("api/testimonial/all");
    }

    private async Task LoadSiteContent()
    {
        siteContent = await Http.GetFromJsonAsync<SiteContent>("api/content");
    }

    private async Task ApproveTestimonial(string id)
    {
        var response = await Http.PostAsync($"api/testimonial/approve/{id}", null);
        if (response.IsSuccessStatusCode) await LoadTestimonials();
    }

    private async Task DisapproveTestimonial(string id)
    {
        var response = await Http.PostAsync($"api/testimonial/disapprove/{id}", null);
        if (response.IsSuccessStatusCode) await LoadTestimonials();
    }

    private async Task RejectTestimonial(string id)
    {
        var response = await Http.PostAsync($"api/testimonial/reject/{id}", null);
        if (response.IsSuccessStatusCode) await LoadTestimonials();
    }

    private async Task UpdateFeatured(Testimonial t, object value)
    {
        bool isChecked = value is bool b ? b : bool.TryParse(value?.ToString(), out var parsed) && parsed;
        t.Featured = isChecked;
        var response = await Http.PostAsJsonAsync("api/testimonial/update", t);
        if (response.IsSuccessStatusCode) await LoadTestimonials();
    }

    private async Task UpdateSiteContent()
    {
        var response = await Http.PostAsJsonAsync("api/content/update", siteContent);
        if (response.IsSuccessStatusCode) await LoadSiteContent();
    }

    private async Task UploadCVEnglish(InputFileChangeEventArgs e)
    {
        var file = e.File;
        using var content = new MultipartFormDataContent();
        using var streamContent = new StreamContent(file.OpenReadStream());
        streamContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);
        content.Add(streamContent, "file", file.Name);
        var response = await Http.PostAsync("api/content/upload", content);
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<UploadResult>();
            siteContent.CVFileEnglishUrl = result.fileUrl;
            StateHasChanged();
        }
    }

    private async Task UploadCVFrench(InputFileChangeEventArgs e)
    {
        var file = e.File;
        using var content = new MultipartFormDataContent();
        using var streamContent = new StreamContent(file.OpenReadStream());
        streamContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);
        content.Add(streamContent, "file", file.Name);
        var response = await Http.PostAsync("api/content/upload", content);
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<UploadResult>();
            siteContent.CVFileFrenchUrl = result.fileUrl;
            StateHasChanged();
        }
    }

    private async Task UploadAboutImage(InputFileChangeEventArgs e)
    {
        var file = e.File;
        using var content = new MultipartFormDataContent();
        using var streamContent = new StreamContent(file.OpenReadStream(10 * 1024 * 1024));
        streamContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);
        content.Add(streamContent, "file", file.Name);
        var response = await Http.PostAsync("api/content/upload", content);
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<UploadResult>();
            siteContent.AboutImageUrl = result.fileUrl;
            StateHasChanged();
        }
    }

    private void ToggleAbout() => isAboutOpen = !isAboutOpen;
    private void ToggleWorks() => isWorksOpen = !isWorksOpen;
    private void ToggleSkills() => isSkillsOpen = !isSkillsOpen;
    private void ToggleContact() => isContactOpen = !isContactOpen;

    private void OpenCVViewer(string url)
    {
        currentCVUrl = url.StartsWith("/") ? url : "/" + url;
        isCVViewerOpen = true;
    }
    private void CloseCVViewer() => isCVViewerOpen = false;

    [CascadingParameter] public string currentLanguage { get; set; }
    private bool isAboutOpen, isWorksOpen, isSkillsOpen, isContactOpen, isCVViewerOpen;
    private string currentCVUrl;

    private int ProjectsPerPage = 3;
    private int currentProjectPage = 1;
    private IEnumerable<Project> PagedProjects =>
      siteContent.Projects.Skip((currentProjectPage - 1) * ProjectsPerPage).Take(ProjectsPerPage);

    private void SeeMoreProjects()
    {
        if ((currentProjectPage * ProjectsPerPage) < siteContent.Projects.Count)
            currentProjectPage++;
        else
            currentProjectPage = 1;
    }

    // Nested models
    public class Testimonial
    {
        public string? Id { get; set; }
        public string? Name { get; set; }
        public string? Comment { get; set; }
        public DateTime SubmittedOn { get; set; }
        public bool Approved { get; set; }
        public bool Featured { get; set; }
        public double Rating { get; set; }
    }

    public class SiteContent
    {
        public string? Id { get; set; }
        public string? AboutTextEnglish { get; set; }
        public string? AboutTextFrench { get; set; }
        public string? AboutImageUrl { get; set; }
        public List<Project> Projects { get; set; } = new List<Project>();
        public string? SkillsContentEnglish { get; set; }
        public string? SkillsContentFrench { get; set; }
        public string? ContactEmail { get; set; }
        public string? ContactPhone { get; set; }
        public string? GithubUrl { get; set; }
        public string? LinkedInUrl { get; set; }
        public string? CVFileFrenchUrl { get; set; }
        public string? CVFileEnglishUrl { get; set; }
    }

    public class Project
    {
        public string? Name { get; set; }
        public string? RepoUrl { get; set; }
        public string? ImageUrl { get; set; }
    }

    public class UploadResult
    {
        public string fileUrl { get; set; }
    }

    private void HandleLogout()
    {
        MyAuth.IsLoggedIn = false;
        Navigation.NavigateTo("/login");
    }
}
